#include "main.h"


#ifndef __pct2075GVX_H
#define __pct2075GVX_H


//**** User Settings ****//
#define SELECT_SHUTDOWN									(0)		// 0: NORMAL
																							// 1: SHUTDOWN
																							
#define SELECT_OS_COMP_INT							(1)		// 0: OS COMPATATOR
																							// 1: INTERRUPT
																							
#define SELECT_OS_F_QUE									(00)		// 00: queue value 1
																							// 01: queue value 2
																							// 10: queue value 4
																							// 11: queue value 6

#define SELECT_HYST											(0x1D3)		// -45 setted (hexadecimal 1 = 0.5°C)

#define SELECT_OS												(0x78)		// +120 setted (hexadecimal 1 = 0.5°C)

#define SELECT_OS_POL										(1)		// 0: OS active LOW
																							// 1: OS active HIGH
																							
																							

//**** Register Addresses ****//
// DO NOT CHANGE
#define REG_ADDR_TEMP										(0x00)
#define REG_ADDR_CONF										(0x01)
#define REG_ADDR_HYST										(0x02)
#define REG_ADDR_OS											(0x03)
#define REG_ADDR_IDLE										(0x04)


//**** Default Values for Registers ****//
// DO NOT CHANGE
#define POR_TEMP												(0x0000)	// Read only _ hexadecimal 1 = 0.125°C
#define POR_CONF												(0x00)
#define POR_HYST												(0x4B00)	// Hysteresis limit: default 75°C
#define POR_OS													(0x5000)	// Overtemperature shutdown limit: default 80°C
#define POR_IDLE												(0x00)		// Temperature conversion cycle default to 100 ms

			
//**** Setting Configuration Register ****//
#define DATA_SHUTDOWN										(SELECT_SHUTDOWN)
#define DATA_OS_COMP_INT								(SELECT_OS_COMP_INT<<1)
#define DATA_OS_POL											(SELECT_OS_POL<<2)
#define DATA_OS_F_QUE										(SELECT_OS_F_QUE<<3)
#define DATA_CONF    										(DATA_SHUTDOWN|DATA_OS_COMP_INT|DATA_OS_POL|DATA_OS_F_QUE)
#define SIZE_OF_DATA_CONF								(2)


//**** Setting Hysteresis and Overtemperature Shutdown Register ****//
#define DATA_HYST												(SELECT_HYST<<7)
#define SIZE_OF_DATA_HYST								(2)
#define DATA_HYST_L											(DATA_HYST)
#define DATA_HYST_H											(DATA_HYST>>8)
#define DATA_OS													(SELECT_OS<<7)
#define SIZE_OF_DATA_OS									(2)
#define DATA_OS_L												(DATA_OS)
#define DATA_OS_H												(DATA_OS>>8)


//**** Setting Idle Register ****//
#define SELECT_IDLE											(1)		// idle x 100ms in between temperature measurements
#define DATA_IDLE												(SELECT_IDLE)
#define SIZE_OF_DATA_IDLE								(1)


//**** Constants ****//
#define MINIMUM_TEMPERATURE_STEP_VALUE	(0.125f)

//**** Functions ****//
HAL_StatusTypeDef PCT2075GVX_Init(I2C_HandleTypeDef *_hi2c, uint8_t _sensorId);
int8_t PCT2075GVX_Read(I2C_HandleTypeDef *_hi2c, uint8_t _sensorId);

#endif // __pct2075GVX_H

/****************************************************************************************
Protocols for writing and reading the registers

1. Before a communication, the I2C-bus must be free or not busy. It means that the SCL
and SDA lines must both be released by all devices on the bus, and they become
HIGH by the bus pull-up resistors.

2. The host must provide SCL clock pulses necessary for the communication. Data is
transferred in a sequence of 9 SCL clock pulses for every 8-bit data byte followed by
1-bit status of the acknowledgement.

3. During data transfer, except the START and STOP signals, the SDA signal must be
stable while the SCL signal is HIGH. It means that the SDA signal can be changed
only during the LOW duration of the SCL line.

4. S: START signal, initiated by the host to start a communication, the SDA goes from
HIGH to LOW while the SCL is HIGH.

5. RS: RE-START signal, same as the START signal, to start a read command that
follows a write command.

6. P: STOP signal, generated by the host to stop a communication, the SDA goes from
LOW to HIGH while the SCL is HIGH. The bus becomes free thereafter.

7. W: write bit, when the write/read bit = LOW in a write command.

8. R: read bit, when the write/read bit = HIGH in a read command.

9. A: device acknowledge bit, returned by the device. It is LOW if the device works
properly and HIGH if not. The host must release the SDA line during this period in
order to give the device the control on the SDA line.

10. A’: master acknowledge bit, not returned by the device, but set by the master or host
in reading 2-byte data. During this clock period, the host must set the SDA line to
LOW in order to notify the device that the first byte has been read for the device to
provide the second byte onto the bus.

11. NA: Not Acknowledge bit. During this clock period, both the device and host release
the SDA line at the end of a data transfer, the host is then enabled to generate the
STOP signal.

12. In a write protocol, data is sent from the host to the device and the host controls the
SDA line, except during the clock period when the device sends the device
acknowledgement signal to the bus.

13. In a read protocol, data is sent to the bus by the device and the host must release the
SDA line during the time that the device is providing data onto the bus and controlling
the SDA line, except during the clock period when the master sends the master
acknowledgement signal to the bus.

NXP - PCT2075GVX
****************************************************************************************/
